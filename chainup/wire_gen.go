// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package chainup

import (
	"chainup.dev/chainup/ansible"
	"chainup.dev/chainup/database"
	"chainup.dev/chainup/database/transaction"
	"chainup.dev/chainup/infrastructure"
	"chainup.dev/chainup/provision"
	"chainup.dev/chainup/statemachine/middleware"
	"chainup.dev/chainup/terraform"
	"chainup.dev/lib/log"
	"testing"
)

// Injectors from inject_database.go:

func SetupDatabaseApp() (*App, func(), error) {
	provider := ProvideFileConfigProvider()
	config := ProvideConfig(provider)
	databaseConfig := config.Database
	logConfig := config.Log
	db, cleanup, err := database.ProvideDB(databaseConfig, logConfig)
	if err != nil {
		return nil, nil, err
	}
	providerSettingsRepository := database.NewProviderSettingsRepository(db)
	jobRepository := database.NewJobRepository(db)
	serverRepository := database.NewServerRepository(db)
	deploymentRepository := database.NewDeploymentRepository(db)
	jobScheduler := provision.NewJobScheduler(db, jobRepository, serverRepository, deploymentRepository)
	terraformConfig := config.Terraform
	terraformTerraform := terraform.ConfigureTerraform(terraformConfig)
	terraformStep := provision.NewTerraformStep(terraformTerraform, serverRepository, jobRepository)
	ansibleConfig := config.Ansible
	ansibleAnsible := ansible.ConfigureAnsible(ansibleConfig)
	ansibleStep := provision.NewAnsibleStep(ansibleAnsible, deploymentRepository, jobRepository)
	transactional := middleware.NewTransactional(db)
	jobStateMachine := provision.ConfigureJobStateMachine(terraformStep, ansibleStep, transactional)
	provisioner := provision.NewProvisioner(jobStateMachine, jobScheduler, terraformTerraform)
	consoleLogger := log.NewConsoleLogger(logConfig)
	app := NewApp(config, providerSettingsRepository, jobScheduler, provisioner, consoleLogger)
	return app, func() {
		cleanup()
	}, nil
}

// Injectors from inject_memory.go:

func SetupInMemoryApp() *App {
	provider := ProvideFileConfigProvider()
	config := ProvideConfig(provider)
	inMemoryProviderSettingsRepository := infrastructure.NewInMemoryProviderSettingsRepository()
	inMemoryTxContext := transaction.NewInMemoryTransactionContext()
	inMemoryJobRepository := provision.NewInMemoryJobRepository()
	inMemoryServerRepository := infrastructure.NewInMemoryServerRepository()
	inMemoryDeploymentRepository := infrastructure.NewInMemoryDeploymentRepository()
	jobScheduler := provision.NewJobScheduler(inMemoryTxContext, inMemoryJobRepository, inMemoryServerRepository, inMemoryDeploymentRepository)
	terraformConfig := config.Terraform
	terraformTerraform := terraform.ConfigureTerraform(terraformConfig)
	terraformStep := provision.NewTerraformStep(terraformTerraform, inMemoryServerRepository, inMemoryJobRepository)
	ansibleConfig := config.Ansible
	ansibleAnsible := ansible.ConfigureAnsible(ansibleConfig)
	ansibleStep := provision.NewAnsibleStep(ansibleAnsible, inMemoryDeploymentRepository, inMemoryJobRepository)
	transactional := middleware.NewTransactional(inMemoryTxContext)
	jobStateMachine := provision.ConfigureJobStateMachine(terraformStep, ansibleStep, transactional)
	provisioner := provision.NewProvisioner(jobStateMachine, jobScheduler, terraformTerraform)
	logConfig := config.Log
	consoleLogger := log.NewConsoleLogger(logConfig)
	app := NewApp(config, inMemoryProviderSettingsRepository, jobScheduler, provisioner, consoleLogger)
	return app
}

// Injectors from inject_testing.go:

func SetupTestApp(t *testing.T) *App {
	provider := ProvideTestConfigProvider()
	config := ProvideConfig(provider)
	inMemoryProviderSettingsRepository := infrastructure.NewInMemoryProviderSettingsRepository()
	inMemoryTxContext := transaction.NewInMemoryTransactionContext()
	inMemoryJobRepository := provision.NewInMemoryJobRepository()
	inMemoryServerRepository := infrastructure.NewInMemoryServerRepository()
	inMemoryDeploymentRepository := infrastructure.NewInMemoryDeploymentRepository()
	jobScheduler := provision.NewJobScheduler(inMemoryTxContext, inMemoryJobRepository, inMemoryServerRepository, inMemoryDeploymentRepository)
	terraformConfig := config.Terraform
	terraformTerraform := terraform.ConfigureTerraform(terraformConfig)
	terraformStep := provision.NewTerraformStep(terraformTerraform, inMemoryServerRepository, inMemoryJobRepository)
	ansibleConfig := config.Ansible
	ansibleAnsible := ansible.ConfigureAnsible(ansibleConfig)
	ansibleStep := provision.NewAnsibleStep(ansibleAnsible, inMemoryDeploymentRepository, inMemoryJobRepository)
	transactional := middleware.NewTransactional(inMemoryTxContext)
	jobStateMachine := provision.ConfigureJobStateMachine(terraformStep, ansibleStep, transactional)
	provisioner := provision.NewProvisioner(jobStateMachine, jobScheduler, terraformTerraform)
	testingLogger := log.NewTestingLogger(t)
	app := NewApp(config, inMemoryProviderSettingsRepository, jobScheduler, provisioner, testingLogger)
	return app
}
